<%- include('../partials/header', { user: typeof user !=='undefined' ? user : undefined }) %>

  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card shadow-sm">
        <div class="card-body">
          <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-0">
              <li class="breadcrumb-item"><a href="/">Home</a></li>
              <li class="breadcrumb-item"><a href="/shop">Shop</a></li>
              <li class="breadcrumb-item"><a href="/shop/product/<%= product._id %>">
                  <%= product.name %>
                </a></li>
              <li class="breadcrumb-item active" aria-current="page">Customize</li>
            </ol>
          </nav>
        </div>
      </div>
    </div>
  </div>

  <div class="row mb-4">
    <div class="col-md-12">
      <div class="card shadow-sm">
        <div class="card-body">
          <h2 class="card-title">Customize Your <%= product.name %>
          </h2>
          <p class="card-text">Personalize your <%= product.name %> by selecting fabric, colors, and patterns.</p>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-8">
      <div class="card shadow-sm">
        <div class="card-header">
          <h3>Design Your <%= product.category %>
          </h3>
        </div>
        <div class="card-body">
          <form action="/shop/save-customization" method="POST" id="customizeForm">
            <input type="hidden" name="productId" value="<%= product._id %>">
            <input type="hidden" name="formAction" id="formAction" value="save">

            <div class="mb-3">
              <label for="name" class="form-label">Design Name</label>
              <input type="text" class="form-control" id="name" name="name" value="Custom <%= product.name %>" required>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label for="fabric" class="form-label">Fabric</label>
                <select class="form-select" id="fabric" name="fabric" required>
                  <option value="" selected disabled>Select Fabric</option>
                  <% product.fabrics.forEach(fabric=> { %>
                    <option value="<%= fabric %>">
                      <%= fabric %>
                    </option>
                    <% }) %>
                </select>
              </div>
              <div class="col-md-6">
                <label for="size" class="form-label">Size</label>
                <select class="form-select" id="size" name="size" required>
                  <option value="" selected disabled>Select Size</option>
                  <% product.sizes.forEach(size=> { %>
                    <option value="<%= size %>">
                      <%= size %>
                    </option>
                    <% }) %>
                </select>
              </div>
            </div>

            <div class="mb-3">
              <label class="form-label">Color</label>
              <div class="d-flex flex-wrap gap-2">
                <% product.colors.forEach(color=> { %>
                  <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="color" id="color<%= color %>"
                      value="<%= color %>" required>
                    <label class="form-check-label" for="color<%= color %>">
                      <span class="color-swatch" data-color="<%= color %>"></span>
                      <%= color %>
                    </label>
                  </div>
                  <% }) %>
              </div>
            </div>

            <div class="mb-3">
              <label class="form-label">Pattern</label>
              <div class="d-flex flex-wrap gap-2">
                <% product.patterns.forEach(pattern=> { %>
                  <div class="form-check form-check-inline">
                    <input class="form-check-input" type="radio" name="pattern"
                      id="pattern<%= pattern.replace(/\s+/g, '') %>" value="<%= pattern %>" required>
                    <label class="form-check-label" for="pattern<%= pattern.replace(/\s+/g, '') %>">
                      <%= pattern %>
                    </label>
                  </div>
                  <% }) %>
              </div>
            </div>

            <div class="mb-3">
              <label for="additionalNotes" class="form-label">Additional Notes</label>
              <textarea class="form-control" id="additionalNotes" name="additionalNotes" rows="3"></textarea>
            </div>

            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-primary"
                onclick="document.getElementById('formAction').value='save'">Save Design & Continue</button>
              <button type="submit" class="btn btn-success"
                onclick="document.getElementById('formAction').value='placeNow'">Place Order Now</button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="col-md-4">
      <div class="card shadow-sm">
        <div class="card-header">
          <h3>3D Preview</h3>
        </div>
        <div class="card-body">
          <div class="design-preview text-center">
            <div id="modelContainer" class="mb-3" style="height: 400px; width: 100%; position: relative;">
              <!-- 3D model will be rendered here -->
              <div id="loading" class="position-absolute top-50 start-50 translate-middle">
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
              </div>
            </div>
            <div class="d-flex justify-content-center mb-3">
              <button type="button" class="btn btn-sm btn-outline-secondary me-2" id="rotateLeft">
                <i class="fas fa-undo"></i> Rotate Left
              </button>
              <button type="button" class="btn btn-sm btn-outline-secondary" id="rotateRight">
                <i class="fas fa-redo"></i> Rotate Right
              </button>
            </div>
            <div id="previewDetails">
              <h5 class="mt-3">Selected Options:</h5>
              <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex justify-content-between">
                  <span>Fabric:</span>
                  <span id="previewFabric" class="fw-bold">-</span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                  <span>Color:</span>
                  <span id="previewColor" class="fw-bold">-</span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                  <span>Pattern:</span>
                  <span id="previewPattern" class="fw-bold">-</span>
                </li>
                <li class="list-group-item d-flex justify-content-between">
                  <span>Size:</span>
                  <span id="previewSize" class="fw-bold">-</span>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Include Three.js -->
  <script src="https://unpkg.com/three@0.139.0/build/three.min.js"></script>
  <script src="/js/OrbitControls.js"></script>
  <script src="/js/GLTFLoader.js"></script>
  <!-- Include our custom 3D models -->
  <script src="/js/3d-models.js"></script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      // 3D Model Viewer
      let scene, camera, renderer, model, controls;
      const modelContainer = document.getElementById('modelContainer');
      const loading = document.getElementById('loading');
      const rotateLeft = document.getElementById('rotateLeft');
      const rotateRight = document.getElementById('rotateRight');

      // Function to load GLB models
      function loadGLBModel(modelPath) {
        console.log('Attempting to load GLB model from:', modelPath);

        // Check if GLTFLoader is available
        if (typeof THREE.GLTFLoader === 'undefined') {
          console.warn('GLTFLoader not available, falling back to procedural model');
          model = ClothingModels.getModel(scene, '<%= product.category %>', '<%= product.gender %>');
          loading.style.display = 'none';
          return;
        }

        const loader = new THREE.GLTFLoader();

        loader.load(
          modelPath,
          function (gltf) {
            // Success callback
            console.log('GLB model loaded successfully:', gltf);

            model = {
              group: gltf.scene,
              materials: [],
              update: function (options) {
                // Find materials in the loaded model
                this.group.traverse((child) => {
                  if (child.isMesh) {
                    if (options.color) {
                      if (child.material.color) {
                        child.material.color.set(options.color);
                      }
                    }
                  }
                });
              }
            };

            // Scale and position the model appropriately
            model.group.scale.set(1, 1, 1);
            model.group.position.set(0, 0, 0);

            // Center the model
            const box = new THREE.Box3().setFromObject(model.group);
            const center = box.getCenter(new THREE.Vector3());
            model.group.position.sub(center);

            // Add to scene
            scene.add(model.group);

            // Hide loading spinner
            loading.style.display = 'none';

            console.log('GLB model added to scene successfully');
          },
          function (progress) {
            // Progress callback
            if (progress.total > 0) {
              const percent = Math.round((progress.loaded / progress.total) * 100);
              console.log('Loading progress:', percent + '%');
            }
          },
          function (error) {
            // Error callback - fallback to procedural model
            console.error('Failed to load GLB model:', error);
            console.log('Falling back to procedural model');
            model = ClothingModels.getModel(scene, '<%= product.category %>', '<%= product.gender %>');
            loading.style.display = 'none';
          }
        );
      }

      // Initialize the 3D scene
      function initScene() {
        // Create scene
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf8f9fa);

        // Create camera
        camera = new THREE.PerspectiveCamera(75, modelContainer.clientWidth / modelContainer.clientHeight, 0.1, 1000);
        camera.position.z = 2;
        camera.position.y = 0;

        // Create renderer
        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(modelContainer.clientWidth, modelContainer.clientHeight);
        renderer.outputEncoding = THREE.sRGBEncoding;
        modelContainer.appendChild(renderer.domElement);

        // Add lights
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(1, 1, 1);
        scene.add(directionalLight);

        // Add controls
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.25;
        controls.enableZoom = true;

        // STRICT RULE 1: EXACT 3D MODEL CONSISTENCY - NO EXCEPTIONS
        const PRODUCT_ID = '<%= product._id %>';
        const modelPath = '<%= product.modelPath || "" %>';
        const productCategory = '<%= product.category %>';
        const productGender = '<%= product.gender %>';
        const productName = '<%= product.name %>';

        // VALIDATION: Ensure we have the exact product data
        if (!PRODUCT_ID || !productCategory) {
          console.error('RULE VIOLATION: Missing product data for 3D model loading');
          throw new Error('Cannot load 3D model: Missing product information');
        }

        console.log('🔒 ENFORCING RULE 1: Loading EXACT 3D model for product:', {
          productId: PRODUCT_ID,
          productName: productName,
          category: productCategory,
          gender: productGender,
          modelPath: modelPath || 'FALLBACK_TO_PROCEDURAL'
        });

        // STRICT ENFORCEMENT: Load the exact model for THIS product only
        if (modelPath && modelPath.trim() !== '' && modelPath !== 'undefined' && modelPath !== 'null') {
          console.log('✅ RULE 1: Loading EXACT GLB model for product ID:', PRODUCT_ID);
          loadGLBModel(modelPath);
        } else {
          console.log('✅ RULE 1: Using EXACT procedural model for category:', productCategory, 'gender:', productGender);
          // STRICT: Use ONLY the exact category and gender from THIS product
          model = ClothingModels.getModel(scene, productCategory, productGender);
          loading.style.display = 'none';
        }

        // VALIDATION: Log successful model binding to product
        console.log('🔒 RULE 1 ENFORCED: 3D model bound to product ID:', PRODUCT_ID);

        // Animation loop
        function animate() {
          requestAnimationFrame(animate);
          controls.update();
          renderer.render(scene, camera);
        }

        animate();

        // Handle window resize
        window.addEventListener('resize', () => {
          camera.aspect = modelContainer.clientWidth / modelContainer.clientHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(modelContainer.clientWidth, modelContainer.clientHeight);
        });

        // Rotation buttons
        rotateLeft.addEventListener('click', () => {
          if (model && model.group) {
            model.group.rotation.y -= Math.PI / 4;
          }
        });

        rotateRight.addEventListener('click', () => {
          if (model && model.group) {
            model.group.rotation.y += Math.PI / 4;
          }
        });
      }

      // Initialize the scene
      initScene();

      // Update model material based on form selections
      function updateModelMaterial() {
        if (!model) return;

        const color = document.querySelector('input[name="color"]:checked')?.value;
        const pattern = document.querySelector('input[name="pattern"]:checked')?.value;
        const fabric = document.getElementById('fabric').value;

        if (model && model.update) {
          // Convert color name to hex
          const colorMap = {
            'Red': 0xff0000,
            'Blue': 0x0000ff,
            'Green': 0x00ff00,
            'Black': 0x000000,
            'White': 0xffffff,
            'Gray': 0x808080,
            'Yellow': 0xffff00,
            'Purple': 0x800080,
            'Pink': 0xffc0cb,
            'Orange': 0xffa500,
            'Brown': 0x8b4513,
            'Navy Blue': 0x000080,
            'Maroon': 0x800000,
            'Forest Green': 0x228b22,
            'Teal': 0x008080,
            'Lavender': 0xe6e6fa,
            'Gold': 0xffd700,
            'Silver': 0xc0c0c0,
            'Burgundy': 0x800020,
            'Emerald': 0x50c878,
            'Royal Blue': 0x4169e1,
            'Light Blue': 0xadd8e6
          };

          const colorHex = colorMap[color] || 0xcccccc;

          // Update the model
          model.update({
            color: colorHex,
            pattern: pattern,
            fabric: fabric
          });
        }
      }

      // Form elements
      const fabricSelect = document.getElementById("fabric");
      const colorInputs = document.querySelectorAll('input[name="color"]');
      const patternInputs = document.querySelectorAll('input[name="pattern"]');
      const sizeSelect = document.getElementById("size");

      // Set swatch backgrounds from data-color attributes
      document.querySelectorAll('.color-swatch').forEach(s => {
        const c = s.getAttribute('data-color') || '';
        try { s.style.backgroundColor = c.toLowerCase(); } catch (e) { /* ignore invalid color */ }
      });

      const previewFabric = document.getElementById("previewFabric");
      const previewColor = document.getElementById("previewColor");
      const previewPattern = document.getElementById("previewPattern");
      const previewSize = document.getElementById("previewSize");

      // Update preview when form elements change
      fabricSelect.addEventListener("change", updatePreview);
      colorInputs.forEach((input) => input.addEventListener("change", updatePreview));
      patternInputs.forEach((input) => input.addEventListener("change", updatePreview));
      sizeSelect.addEventListener("change", updatePreview);

      function updatePreview() {
        if (fabricSelect.value) {
          previewFabric.textContent = fabricSelect.value;
        }

        const selectedColor = document.querySelector('input[name="color"]:checked');
        if (selectedColor) {
          previewColor.textContent = selectedColor.value;
        }

        const selectedPattern = document.querySelector('input[name="pattern"]:checked');
        if (selectedPattern) {
          previewPattern.textContent = selectedPattern.value;
        }

        if (sizeSelect.value) {
          previewSize.textContent = sizeSelect.value;
        }

        // Update 3D model
        updateModelMaterial();
      }
    });
  </script>

  <%- include('../partials/footer') %>